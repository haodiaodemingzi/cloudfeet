package models

import (
	"fmt"
	"strings"
	"time"

	mysql "github.com/haodiaodemingzi/cloudfeet/common/gmysql"
)

/*
This code is generated by gendry
*/

// Proxy is a mapping object for proxy table in mysql
type Proxy struct {
	ID            int       `db:"id"`
	Server        string    `db:"server"`
	Domain        string    `db:"domain"`
	Port          int       `db:"port"`
	EncryptMethod string    `db:"encrypt_method"`
	Password      string    `db:"password"`
	Name          string    `db:"name"`
	CreateTime    time.Time `db:"create_time"`
	UpdateTime    time.Time `db:"update_time"`
}

// Update updates the table proxy
func (p *Proxy) Query(where map[string]interface{}) ([]Proxy, error) {
	db := mysql.GetDB()

	limit := fmt.Sprintf("%v", where["limit"])
	delete(where, "limit")

	// do join where str
	var w []string
	for k, _ := range where {
		w = append(w, fmt.Sprintf("%s=:%s", k, k))
	}
	whereStr := strings.Join(w, " and ")

	// spec sql
	var sql = "select id, server, port, encrypt_method, " +
		"`name`, password, create_time, update_time from proxy where " + whereStr
	if limit != "" {
		sql += " limit " + limit
	}
	logger.Info(sql)

	ns, _ := db.PrepareNamed(sql)
	rows, _ := ns.Queryx(where)
	var proxyList []Proxy
	for rows.Next() {
		var proxy = Proxy{}
		err := rows.StructScan(&proxy)
		if err != nil {
			logger.Fatal(err.Error())
			return nil, err
		}
		proxyList = append(proxyList, proxy)
	}

	return proxyList, nil
}
