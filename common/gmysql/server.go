package gmysql

import (
	"errors"
	"github.com/didi/gendry/builder"
	"github.com/didi/gendry/scanner"
	"time"
)

/*
This code is generated by gendry
*/

// Server is a mapping object for server table in mysql
type Server struct {
	ID           int       `json:"id"`
	IP           string    `json:"ip"`
	Domain       string    `json:"domain"`
	Idc          string    `json:"idc"`
	Region       string    `json:"region"`
	Country      string    `json:"country"`
	Zone         string    `json:"zone"`
	CPU          int       `json:"cpu"`
	Mem          int       `json:"mem"`
	Disk         int       `json:"disk"`
	ExpireTime   time.Time `json:"expire_time"`
	CreateTime   time.Time `json:"create_time"`
	Price        float64   `json:"price"`
	Status       int8      `json:"status"`
	InstanceType string    `json:"instance_type"`
	Bandwidth    int       `json:"bandwidth"`
	Traffic      int       `json:"traffic"`
}

func (s *Server) GetOne(where map[string]interface{}) (*Server, error) {
	db := GetDB()
	if nil == db {
		return nil, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildSelect("server", where, nil)
	if nil != err {
		return nil, err
	}
	row, err := db.Query(cond, vals...)
	if nil != err || nil == row {
		return nil, err
	}
	defer row.Close()
	var res *Server
	err = scanner.Scan(row, &res)
	return res, err
}

//GetMulti gets multiple records from table server by condition "where"
func (s *Server) GetMulti(where map[string]interface{}) ([]*Server, error) {
	db := GetDB()
	if nil == db {
		return nil, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildSelect("server", where, nil)
	if nil != err {
		return nil, err
	}
	row, err := db.Query(cond, vals...)
	if nil != err || nil == row {
		return nil, err
	}
	defer row.Close()
	var res []*Server
	err = scanner.Scan(row, &res)
	return res, err
}

//Insert inserts an array of data into table server
func (s *Server) Insert(data []map[string]interface{}) (int64, error) {
	db := GetDB()
	if nil == db {
		return 0, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildInsert("server", data)
	if nil != err {
		return 0, err
	}
	result, err := db.Exec(cond, vals...)
	if nil != err || nil == result {
		return 0, err
	}
	return result.LastInsertId()
}

//Update updates the table server
func (s *Server) Update(where, data map[string]interface{}) (int64, error) {
	db := GetDB()
	if nil == db {
		return 0, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildUpdate("server", where, data)
	if nil != err {
		return 0, err
	}
	result, err := db.Exec(cond, vals...)
	if nil != err {
		return 0, err
	}
	return result.RowsAffected()
}

// Delete deletes matched records in server
func (s *Server) Delete(where, data map[string]interface{}) (int64, error) {
	db := GetDB()
	if nil == db {
		return 0, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildDelete("server", where)
	if nil != err {
		return 0, err
	}
	result, err := db.Exec(cond, vals...)
	if nil != err {
		return 0, err
	}
	return result.RowsAffected()
}
