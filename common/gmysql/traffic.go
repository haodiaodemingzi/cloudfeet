package gmysql

import (
	"errors"
	"github.com/didi/gendry/builder"
	"github.com/didi/gendry/scanner"
	"time"
)

/*
	This code is generated by gendry
*/

// Traffic is a mapping object for traffic table in mysql
type Traffic struct {
	ID         int       `json:"id"`
	UserID     int       `json:"user_id"`
	ProxyID    int       `json:"proxy_id"`
	TrafficID  int       `json:"traffic_id"`
	Usage      string    `json:"usage"`
	Online     int       `json:"online"`
	CreateTime time.Time `json:"create_time"`
	UpdateTime time.Time `json:"update_time"`
	DeviceID   int       `json:"device_id"`
}

func (t *Traffic) GetOne(where map[string]interface{}) (*Traffic, error) {
	db := GetDB()
	if nil == db {
		return nil, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildSelect("traffic", where, nil)
	if nil != err {
		return nil, err
	}
	row, err := db.Query(cond, vals...)
	if nil != err || nil == row {
		return nil, err
	}
	defer row.Close()
	var ret *Traffic
	err = scanner.Scan(row, &ret)
	return ret, err
}

//GetMulti gets multiple records from table traffic by condition "where"
func (t *Traffic) GetMulti(where map[string]interface{}) ([]*Traffic, error) {
	db := GetDB()
	if nil == db {
		return nil, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildSelect("traffic", where, nil)
	if nil != err {
		return nil, err
	}
	row, err := db.Query(cond, vals...)
	if nil != err || nil == row {
		return nil, err
	}
	defer row.Close()
	var ret []*Traffic
	err = scanner.Scan(row, &ret)
	return ret, err
}

//Insert inserts an array of data into table traffic
func (t *Traffic) Insert(data []map[string]interface{}) (int64, error) {
	db := GetDB()
	if nil == db {
		return 0, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildInsert("traffic", data)
	if nil != err {
		return 0, err
	}
	result, err := db.Exec(cond, vals...)
	if nil != err || nil == result {
		return 0, err
	}
	return result.LastInsertId()
}

//Update updates the table traffic
func (t *Traffic) Update(where, data map[string]interface{}) (int64, error) {
	db := GetDB()
	if nil == db {
		return 0, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildUpdate("traffic", where, data)
	if nil != err {
		return 0, err
	}
	result, err := db.Exec(cond, vals...)
	if nil != err {
		return 0, err
	}
	return result.RowsAffected()
}

// Delete deletes matched records in traffic
func (t *Traffic) Delete(where, data map[string]interface{}) (int64, error) {
	db := GetDB()
	if nil == db {
		return 0, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildDelete("traffic", where)
	if nil != err {
		return 0, err
	}
	result, err := db.Exec(cond, vals...)
	if nil != err {
		return 0, err
	}
	return result.RowsAffected()
}
