package gmysql

import (
	"errors"
	"fmt"
	"github.com/didi/gendry/builder"
	"github.com/didi/gendry/scanner"
)

/*
This code is generated by gendry
*/

// User is a mapping object for user table in mysql
type User struct {
	ID        int    `ddb:"id"`
	FirstName string `ddb:"first_name"`
	LastName  string `ddb:"last_name"`
	Username  string `ddb:"username"`
	Role      string `ddb:"role"`
	Status    int8   `ddb:"status"`
	Quota     int    `ddb:"quota"`
}

func (u *User) GetOne(where map[string]interface{}) (*User, error) {
	db := GetDB()
	if nil == db {
		return nil, errors.New("sql.DB object couldn't be nil")
	}
	selectFields := []string{"role", "username"}
	//cond, vals, err := builder.BuildSelect("user", where, nil)
	cond, vals, err := builder.BuildSelect("user", where, selectFields)
	if nil != err {
		return nil, err
	}
	row, err := db.Query(cond, vals...)
	if nil != err || nil == row {
		return nil, err
	}
	defer row.Close()
	var res *User
	err = scanner.Scan(row, &res)
	row, err = db.Query("select * from user")
	err = scanner.Scan(row, &res)
	fmt.Println(res)

	return res, err
}

//GetMulti gets multiple records from table user by condition "where"
func (u *User) GetMulti(where map[string]interface{}) ([]*User, error) {
	db := GetDB()
	if nil == db {
		return nil, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildSelect("user", where, nil)
	if nil != err {
		return nil, err
	}
	row, err := db.Query(cond, vals...)
	if nil != err || nil == row {
		return nil, err
	}
	defer row.Close()
	var res []*User
	err = scanner.Scan(row, &res)
	return res, err
}

//Insert inserts an array of data into table user
func (u *User) Insert(data []map[string]interface{}) (int64, error) {
	db := GetDB()
	if nil == db {
		return 0, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildInsert("user", data)
	if nil != err {
		return 0, err
	}
	result, err := db.Exec(cond, vals...)
	if nil != err || nil == result {
		return 0, err
	}
	return result.LastInsertId()
}

//Update updates the table user
func (u *User) Update(where, data map[string]interface{}) (int64, error) {
	db := GetDB()
	if nil == db {
		return 0, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildUpdate("user", where, data)
	if nil != err {
		return 0, err
	}
	result, err := db.Exec(cond, vals...)
	if nil != err {
		return 0, err
	}
	return result.RowsAffected()
}

// Delete deletes matched records in user
func (u *User) Delete(where, data map[string]interface{}) (int64, error) {
	db := GetDB()
	if nil == db {
		return 0, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildDelete("user", where)
	if nil != err {
		return 0, err
	}
	result, err := db.Exec(cond, vals...)
	if nil != err {
		return 0, err
	}
	return result.RowsAffected()
}
