package gmysql

import (
	"errors"
	"github.com/didi/gendry/builder"
	"github.com/didi/gendry/scanner"
)

/*
This code is generated by gendry
*/

// DNS is a mapping object for dns table in mysql
type DNS struct {
	ID     int    `json:"id"`
	Server string `json:"server"`
}

func (d *DNS) GetOne(where map[string]interface{}) (*DNS, error) {
	db := GetDB()
	if nil == db {
		return nil, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildSelect("dns", where, nil)
	if nil != err {
		return nil, err
	}
	row, err := db.Query(cond, vals...)
	if nil != err || nil == row {
		return nil, err
	}
	defer row.Close()
	var res *DNS
	err = scanner.Scan(row, &res)
	return res, err
}

//GetMulti gets multiple records from table dns by condition "where"
func (d *DNS) GetMulti(where map[string]interface{}) ([]*DNS, error) {
	db := GetDB()
	if nil == db {
		return nil, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildSelect("dns", where, nil)
	if nil != err {
		return nil, err
	}
	row, err := db.Query(cond, vals...)
	if nil != err || nil == row {
		return nil, err
	}
	defer row.Close()
	var res []*DNS
	err = scanner.Scan(row, &res)
	return res, err
}

//Insert inserts an array of data into table dns
func (d *DNS) Insert(data []map[string]interface{}) (int64, error) {
	db := GetDB()
	if nil == db {
		return 0, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildInsert("dns", data)
	if nil != err {
		return 0, err
	}
	result, err := db.Exec(cond, vals...)
	if nil != err || nil == result {
		return 0, err
	}
	return result.LastInsertId()
}

//Update updates the table dns
func (d *DNS) Update(where, data map[string]interface{}) (int64, error) {
	db := GetDB()
	if nil == db {
		return 0, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildUpdate("dns", where, data)
	if nil != err {
		return 0, err
	}
	result, err := db.Exec(cond, vals...)
	if nil != err {
		return 0, err
	}
	return result.RowsAffected()
}

// Delete deletes matched records in dns
func (d *DNS) Delete(where, data map[string]interface{}) (int64, error) {
	db := GetDB()
	if nil == db {
		return 0, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildDelete("dns", where)
	if nil != err {
		return 0, err
	}
	result, err := db.Exec(cond, vals...)
	if nil != err {
		return 0, err
	}
	return result.RowsAffected()
}
