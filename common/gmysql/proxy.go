package gmysql

import (
	"errors"
	"time"

	"github.com/didi/gendry/builder"
	"github.com/didi/gendry/scanner"
)

/*
This code is generated by gendry
*/

// Proxy is a mapping object for proxy table in mysql
type Proxy struct {
	ID            int       `json:"id"`
	OutlineID     int       `json:"outline_id"`
	IP            string    `json:"ip"`
	Domain        string    `json:"domain"`
	Port          int       `json:"port"`
	EncryptMethod string    `json:"encrypt_method"`
	Password      string    `json:"password"`
	Name          string    `json:"name"`
	CreateTime    time.Time `json:"create_time"`
	UpdateTime    time.Time `json:"update_time"`
}

//GetOne gets one record from table proxy by condition "where"
func (p *Proxy) GetOne(where map[string]interface{}) (*Proxy, error) {
	db := GetDB()
	if nil == db {
		return nil, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildSelect("proxy", where, nil)
	if nil != err {
		return nil, err
	}
	row, err := db.Query(cond, vals...)
	if nil != err || nil == row {
		return nil, err
	}
	defer row.Close()
	var res *Proxy
	err = scanner.Scan(row, &res)
	return res, err
}

//GetMulti gets multiple records from table proxy by condition "where"
func (p *Proxy) GetMulti(where map[string]interface{}) ([]*Proxy, error) {
	db := GetDB()
	if nil == db {
		return nil, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildSelect("proxy", where, nil)
	if nil != err {
		return nil, err
	}
	row, err := db.Query(cond, vals...)
	if nil != err || nil == row {
		return nil, err
	}
	defer row.Close()
	var res []*Proxy
	err = scanner.Scan(row, &res)
	return res, err
}

//Insert inserts an array of data into table proxy
func (p *Proxy) Insert(data []map[string]interface{}) (int64, error) {
	db := GetDB()
	if nil == db {
		return 0, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildInsert("proxy", data)
	if nil != err {
		return 0, err
	}
	result, err := db.Exec(cond, vals...)
	if nil != err || nil == result {
		return 0, err
	}
	return result.LastInsertId()
}

// Update updates the table proxy
func (p *Proxy) Update(where, data map[string]interface{}) (int64, error) {
	db := GetDB()
	if nil == db {
		return 0, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildUpdate("proxy", where, data)
	if nil != err {
		return 0, err
	}
	result, err := db.Exec(cond, vals...)
	if nil != err {
		return 0, err
	}
	return result.RowsAffected()
}

// Delete deletes matched records in proxy
func (p *Proxy) Delete(where map[string]interface{}) (int64, error) {
	db := GetDB()
	if nil == db {
		return 0, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildDelete("proxy", where)
	if nil != err {
		return 0, err
	}
	result, err := db.Exec(cond, vals...)
	if nil != err {
		return 0, err
	}
	return result.RowsAffected()
}
